using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CStutorial.Yield
{
	public static class YieldEx
	{
		/*
		 * yield is a keyword that allows the compiler
		 * convert the section/block into an iterator.
		 */

		/*
		 * This link shows how the compiler compiles the
		 * yield blocks to code.
		 * 
		 * https://csharpindepth.com/articles/IteratorBlockImplementation
		 */

		public static void ExecuteYieldTest()
		{
			int cycle = 1;
			foreach (string word in ExecuteYieldFunc())
			{
				Console.WriteLine("Cycle: " + cycle);
				Console.WriteLine("Word: " + word);
				cycle++;
			}
		}

		private static IEnumerable<string> ExecuteYieldFunc()
		{
			Console.WriteLine("1");
			yield return "Hello";

			Console.WriteLine("2");
			yield return "World";

			Console.WriteLine("3");
			yield return "Just";

			Console.WriteLine("4");
			yield return "Testing";

			Console.WriteLine("5");
			yield return "Again";

			Console.WriteLine("6");
			yield return "Values";
		}

		/*
		 * The code behind that is generated by the compiler (sudocode) for the above yield states.
		 * 
		 * private sealed class <ExecuteYieldFunc>d__0 : IEnumerable<string>, IEnumerable, IEnumerator<int>, IEnumerator, IDisposable // this is an innerclass
		 * {
		 *		.... variables
		 *		.... // visit link for more info
		 *		
		 *		private bool MoveNext()
		 *		{
		 *			switch (this.<>1__state)
		 *			{
		 *				case 0:
		 *					this.<>1__state = -1;
		 *					Console.WriteLine("1");
		 *					this.<>2__current = "Hello";
	     *					this.<>1__state = 1;
		 *					return true;
		 *
		 *				case 1:
		 *					this.<>1__state = -1;
		 *					Console.WriteLine("2");
		 *					this.<>2__current = "World";
		 *					this.<>1__state = 2;
		 *					return true;
		 *			
		 *				case 2:
		 *					this.<>1__state = -1;
		 *					Console.WriteLine("3");
		 *					this.<>2__current = "Just";
		 *					this.<>1__state = 3;
		 *					return true;
		 *
		 *				case 3:
		 *					this.<>1__state = -1;
		 *					Console.WriteLine("4");
		 *					this.<>2__current = "Testing";
		 *					this.<>1__state = 4;
		 *					return true;
		 *
		 *				...
		 *			}
		 *		}
		 * }
		 * 
		 * */
	}
}